---
title: The example code for processing the PTM proteomics data
jupyter: python3
---

```{python}
from utils import *

import os
import warnings

warnings.filterwarnings("ignore")

from IPython.display import display
plt.rcParams['figure.figsize'] = [7, 5]
# plt.rcParams['figure.dpi'] = 100 # 200 e.g. is really fine, but slower

```

## User inputs

```{python}
working_dir = "."

data_dir = f"{os.path.abspath(working_dir)}/data/PTM" # same
result_dir = f"{os.path.abspath(working_dir)}/results/PTM" # same
Path(result_dir).mkdir(parents=True, exist_ok=True)

fasta_file = f"{data_dir}/reference_proteome.fasta"
metadata_file = f"{data_dir}/metadata.txt"   # 

global_prot_file = f"{data_dir}/global_prot.tsv"
global_pept_file = f"{data_dir}/global_pept.tsv"
redox_pept_file = f"{data_dir}/redox_pept.tsv"
phospho_pept_file = f"{data_dir}/phospho_pept.tsv"
acetyl_pept_file = f"{data_dir}/acetyl_pept.tsv"


experiment_name = "Test" # same
search_tool = "MSGF+" # this might not be necessary anymore, maybe fore preprocessing, but not here
experiment_type = "TMT" # TMT or Label-free

# Statistics setup
pairwise_factor = "Time"
anova_factors = ["Treatment", pairwise_factor] # Optional

# normali the batch correction only for TMT data
batch_correct_samples = "" # If it is TMT experiment then batch correction might be needed. User need to provide a list of column names of samples are used for batch correction. If "" provided, then batch_correct_samples should be all samples except the pooled channel samples
# TMT data are usually processed into log2 scale, but not always
log2_scale = True
# If there is multiple batches
batch_correction = True # If False, then no batch correction will be performed

# Unique to TMT data
Pooled_Chanel_Condition = "Total"

# User defined pair-wise comparison groups, possibly need a function to generate from a list of group pairs 
user_ttest_pairs = [["Infected_8h", "Infected_16h"], ["Infected_8h", "Infected_16h"]]

### Unique for PTM data
phospho_symbol = '#'
redox_symbol = '@'
acetyl_symbol = '@'
phospho_ascore_col = "AScore"

```

## Setting up the parameters, custermizable for users, but recommend to use the default values. That requires prepare the metadata file following the correct format

```{python}
id_separator = '@'  # same
sig_thr = 0.05 # same
sig_type = "pval" #same either "pval" or "adj-p"
missing_thr = 0 # same
min_pept_count = 2 # unique to lip
# metadata columns
metadata_batch_col = "Batch"
metadata_sample_col = "Sample"
metadata_group_col = "Group"
metadata_condition_col = "Condition"
metadata_control_condition = "Control"
metadata_treatment_condition = "Treatment"
```

```{python}
# Output table columns
id_col = 'id'
uniprot_col = "UniProt"
protein_col = "Protein"
peptide_col = "Peptide"
site_col = "Site"
residue_col = "Residue"
type_col = "Type"
experiment_col = "Experiment"
site_number_col = "site_number"
```

## PTM data analysis

### Import all the data

In this section, we define parameters and import all the data.

```{python}
prot_seqs = get_sequences_from_fasta(fasta_file)
len(prot_seqs)
```

```{python}
metadata = pd.read_csv(metadata_file, sep='\t')
metadata
```


```{python}
control_groups = list(metadata[metadata[metadata_condition_col]==metadata_control_condition][metadata_group_col].unique())
control_group_cols = [metadata[metadata[metadata_group_col] == group][metadata_sample_col].to_list() for group in control_groups]
treat_groups = list(metadata[metadata[metadata_condition_col]==metadata_treatment_condition][metadata_group_col].unique())
treat_group_cols = [metadata[metadata[metadata_group_col] == group][metadata_sample_col].to_list() for group in treat_groups]
groups = control_groups + treat_groups
group_cols = control_group_cols + treat_group_cols
all_groups = list(metadata[metadata_group_col].unique())
all_group_cols = [metadata[metadata[metadata_group_col] == group][metadata_sample_col].to_list() for group in all_groups]
TT_groups = list(metadata[metadata[metadata_condition_col] == Pooled_Chanel_Condition][metadata_group_col].unique())
TT_group_cols = [metadata[metadata[metadata_group_col] == group][metadata_sample_col].to_list() for group in TT_groups]
int_cols = metadata[metadata_sample_col].to_list()

if batch_correct_samples == "":
    batch_correct_samples = [sample for sample in metadata[metadata_sample_col].values if sample not in flatten(TT_group_cols)] # If it is TMT experiment then batch correction might be needed. If "" provided, then batch_correct_samples should be all samples except the pooled channel samples

anova_cols = [sample for sample in metadata[metadata_sample_col].values if sample not in flatten(TT_group_cols)]

pairwise_pars = metadata[pairwise_factor].unique()
pairwise_ttest_groups = []
for par in pairwise_pars:
    for control_group in list(set(metadata[(metadata[metadata_condition_col]==metadata_control_condition) & (metadata[pairwise_factor] == par)][metadata_group_col])):
        for treat_group in list(set(metadata[(metadata[metadata_condition_col]==metadata_treatment_condition) & (metadata[pairwise_factor] == par)][metadata_group_col])):
            pairwise_ttest_groups.append([f"{treat_group}/{control_group}", control_group, treat_group, metadata[metadata[metadata_group_col] == control_group][metadata_sample_col].to_list(), metadata[metadata[metadata_group_col] == treat_group][metadata_sample_col].to_list()])

user_pairwise_ttest_groups = []
for user_test_pair in user_ttest_pairs:
    user_ctrl_group = user_test_pair[0]
    user_treat_group = user_test_pair[1]
    user_pairwise_ttest_groups.append([f"{user_treat_group}/{user_ctrl_group}", user_ctrl_group, user_treat_group, metadata[metadata[metadata_group_col] == user_ctrl_group][metadata_sample_col].to_list(), metadata[metadata[metadata_group_col] == user_treat_group][metadata_sample_col].to_list()])

stats_cols = ["Total missingness"] + [f"{group} missingness" for group in groups] + [pairwise_ttest_group[0] for pairwise_ttest_group in pairwise_ttest_groups] + [f"{pairwise_ttest_group[0]}_pval" for pairwise_ttest_group in pairwise_ttest_groups] + [f"{pairwise_ttest_group[0]}_adj-p" for pairwise_ttest_group in pairwise_ttest_groups] + [time_pairwise_ttest_group[0] for time_pairwise_ttest_group in user_pairwise_ttest_groups] + [f"{time_pairwise_ttest_group[0]}_pval" for time_pairwise_ttest_group in user_pairwise_ttest_groups] + [f"{time_pairwise_ttest_group[0]}_adj-p" for time_pairwise_ttest_group in user_pairwise_ttest_groups]

if len(groups) > 2:
    if len(anova_factors) < 1 or 'anova_factors' not in locals() or 'anova_factors' not in globals():
        anova_factors = [metadata_group_col]
    anova_factor_names = [f"{anova_factors[i]} * {anova_factors[j]}" if i != j else f"{anova_factors[i]}" for i in range(len(anova_factors)) for j in range(i, len(anova_factors))]
    stats_cols += [f"ANOVA_[{anova_factor_name}]_pval" for anova_factor_name in anova_factor_names] 
    stats_cols += [f"ANOVA_[{anova_factor_name}]_adj-p" for anova_factor_name in anova_factor_names] 

```


```{python}
prot_info_cols = [id_col, uniprot_col, protein_col, site_col, residue_col, type_col, experiment_col, site_number_col] 
prot_info_stats_cols = prot_info_cols + int_cols + stats_cols 
pept_info_cols = [id_col, uniprot_col, protein_col, site_col, residue_col, type_col, experiment_col, site_number_col]
pept_info_stats_cols = pept_info_cols + int_cols + stats_cols
```


#### Load all the cross tabs data

```{python}
global_prot = pd.read_csv(global_prot_file, sep='\t')
global_prot
```

```{python}
global_pept = pd.read_csv(global_pept_file, sep='\t')
global_pept
```

```{python}
redox_pept = pd.read_csv(redox_pept_file, sep='\t')
redox_pept
```

```{python}
phospho_pept = pd.read_csv(phospho_pept_file, sep='\t')
phospho_pept
```

```{python}
acetyl_pept = pd.read_csv(acetyl_pept_file, sep='\t')
acetyl_pept
```

#################################################################################
#################################################################################

# The analysis pipeline

## Data process and analysis

```{python}
print(global_prot.shape)
print(global_pept.shape)
print(redox_pept.shape)
print(phospho_pept.shape)
print(acetyl_pept.shape)
```

```{python}
global_prot = generate_index(global_prot, uniprot_col)
redox_pept = generate_index(redox_pept, uniprot_col, peptide_col, id_separator)
phospho_pept = generate_index(phospho_pept, uniprot_col, peptide_col, id_separator)
acetyl_pept = generate_index(acetyl_pept, uniprot_col, peptide_col, id_separator)
```

```{python}
print(global_prot.shape)
print(global_pept.shape)
print(redox_pept.shape)
print(phospho_pept.shape)
print(acetyl_pept.shape)
```

```{python}
if not log2_scale:
    double_pept = log2_transformation(double_pept, int_cols)
    trypsin_pept = log2_transformation(trypsin_pept, int_cols)
    trypsin_prot = log2_transformation(trypsin_prot, int_cols)
```

```{python}
# # Optional: filter out proteins with missing values
# global_prot = filter_missingness(global_prot, groups, group_cols, missing_thr)
```

```{python}
if not batch_correction:
    global_prot = median_normalization(global_prot, int_cols)
else:
    # NB: median normalization is only for global proteomics data, PTM data need to be normalized by global proteomics data
    global_prot = median_normalization(global_prot, int_cols, metadata, batch_correct_samples, batch_col=metadata_batch_col, sample_col=metadata_sample_col)
    # Batch correction
    global_prot = batch_correction(global_prot, metadata, batch_correct_samples, batch_col=metadata_batch_col, sample_col=metadata_sample_col)
```

```{python}
if len(groups) > 2:
    global_prot = anova(global_prot, anova_cols, metadata)
    global_prot = anova(global_prot, anova_cols, metadata, anova_factors)
    # # Optional: one should perform the ANOVA analysis for PTM data after decomposed the effects of global abundance changes
```

```{python}
global_prot = pairwise_ttest(global_prot, pairwise_ttest_groups)
global_prot = pairwise_ttest(global_prot, user_pairwise_ttest_groups)
```

```{python}
global_prot.to_csv(f"{result_dir}/global_prot_processed.tsv", sep='\t')
# global_prot.to_pickle(f"{result_dir}/global_prot_processed.pkl")
```


```{python}
# # Optional: roll up to the unique peptide level
# redox_pept = rollup_to_peptide(redox_pept, int_cols, peptide_col, id_col, id_separator)
# phospho_pept = rollup_to_peptide(phospho_pept, int_cols, peptide_col, id_col, id_separator)
# acetyl_pept = rollup_to_peptide(acetyl_pept, int_cols, peptide_col, id_col, id_separator)
```

```{python}
# # Optional: filter out peptides with missing values
# prot = filter_missingness(prot, groups, group_cols, missing_thr)
# redox_pept = filter_missingness(redox_pept, groups, group_cols, missing_thr)
# phospho_pept = filter_missingness(phospho_pept, groups, group_cols, missing_thr)
# acetyl_pept = filter_missingness(acetyl_pept, groups, group_cols, missing_thr)
```

```{python}
if experiment_type == "TMT":
    redox_pept = TMT_normalization(redox_pept, global_pept, int_cols)
    phospho_pept = TMT_normalization(phospho_pept, global_pept, int_cols)
    acetyl_pept = TMT_normalization(acetyl_pept, global_pept, int_cols)
else:
    redox_pept = median_normalization(redox_pept, int_cols)
    phospho_pept = median_normalization(phospho_pept, int_cols)
    acetyl_pept = median_normalization(acetyl_pept, int_cols)

```

```{python}
redox = rollup_to_site(redox_pept, int_cols, uniprot_col, peptide_col, residue_col, ';', id_col, id_separator, site_col, rollup_func="Sum")
phospho = rollup_to_site(phospho_pept, int_cols, uniprot_col, peptide_col, residue_col, ';', id_col, id_separator, site_col, rollup_func="Sum")
acetyl = rollup_to_site(acetyl_pept, int_cols, uniprot_col, peptide_col, residue_col, ';', id_col, id_separator, site_col, rollup_func="Sum")
```

```{python}
# Batch correction
if batch_correction:
    redox = batch_correction(redox, metadata, batch_correct_samples, batch_col=metadata_batch_col, sample_col=metadata_sample_col)
    phospho = batch_correction(phospho, metadata, batch_correct_samples, batch_col=metadata_batch_col, sample_col=metadata_sample_col)
    acetyl = batch_correction(acetyl, metadata, batch_correct_samples, batch_col=metadata_batch_col, sample_col=metadata_sample_col)
```

```{python}
redox_uncorrected = redox.copy()
phospho_uncorrected = phospho.copy()
acetyl_uncorrected = acetyl.copy()
```

```{python}
if len(groups) > 2:
    redox_uncorrected = anova(redox_uncorrected, anova_cols, metadata)
    phospho_uncorrected = anova(phospho_uncorrected, anova_cols, metadata)
    acetyl_uncorrected = anova(acetyl_uncorrected, anova_cols, metadata)
    redox_uncorrected = anova(redox_uncorrected, anova_cols, metadata, anova_factors)
    phospho_uncorrected = anova(phospho_uncorrected, anova_cols, metadata, anova_factors)
    acetyl_uncorrected = anova(acetyl_uncorrected, anova_cols, metadata, anova_factors)

```

```{python}
redox_uncorrected = pairwise_ttest(redox_uncorrected, pairwise_ttest_groups)
phospho_uncorrected = pairwise_ttest(phospho_uncorrected, pairwise_ttest_groups)
acetyl_uncorrected = pairwise_ttest(acetyl_uncorrected, pairwise_ttest_groups)

redox_uncorrected = pairwise_ttest(redox_uncorrected, user_pairwise_ttest_groups)
phospho_uncorrected = pairwise_ttest(phospho_uncorrected, user_pairwise_ttest_groups)
acetyl_uncorrected = pairwise_ttest(acetyl_uncorrected, user_pairwise_ttest_groups)
```

```{python}
all_ptms_uncorrected = combine_multi_PTMs({"global": prot, "redox": redox_uncorrected, "phospho": phospho_uncorrected, "acetyl": acetyl_uncorrected}, residue_col, uniprot_col, site_col, site_number_col, id_separator, id_col)
```

```{python}
all_ptms_uncorrected = check_missingness(all_ptms_uncorrected, groups, group_cols)
```

```{python}
all_ptms_uncorrected.to_csv(f"{result_dir}/{sample}_all_ptms_uncorrected.tsv", sep='\t', index=False)
all_ptms_uncorrected.to_pickle(f"{result_dir}/{sample}_all_ptms_uncorrected.pkl")
```

#### Normalization by protein abundance changes

```{python}
print(prot.shape)
print(redox.shape)
print(phospho.shape)
print(acetyl.shape)
```

```{python}
redox = prot_abund_correction(redox, prot, int_cols, uniprot_col, flatten(group_cols))
phospho = prot_abund_correction(phospho, prot, int_cols, uniprot_col, flatten(group_cols))
acetyl = prot_abund_correction(acetyl, prot, int_cols, uniprot_col, flatten(group_cols))
```

#### Stats for PTM site level data after normalized by protein abundance changes

```{python}
if len(groups) > 2:
    redox = anova(redox, anova_cols, metadata)
    phospho = anova(phospho, anova_cols, metadata)
    acetyl = anova(acetyl, anova_cols, metadata)
    redox = anova(redox, anova_cols, metadata, anova_factors)
    phospho = anova(phospho, anova_cols, metadata, anova_factors)
    acetyl = anova(acetyl, anova_cols, metadata, anova_factors)

```

```{python}
redox = pairwise_ttest(redox, pairwise_ttest_groups)
phospho = pairwise_ttest(phospho, pairwise_ttest_groups)
acetyl = pairwise_ttest(acetyl, pairwise_ttest_groups)

redox = pairwise_ttest(redox, user_pairwise_ttest_groups)
phospho = pairwise_ttest(phospho, user_pairwise_ttest_groups)
acetyl = pairwise_ttest(acetyl, user_pairwise_ttest_groups)
```

```{python}
print(prot.shape)
print(redox.shape)
print(phospho.shape)
print(acetyl.shape)
```

#### Summarize the PTM site level data

```{python}
all_ptms = combine_multi_PTMs({"global": prot, "redox": redox, "phospho": phospho, "acetyl": acetyl}, residue_col, uniprot_col, site_col, site_number_col, id_separator, id_col)
```

```{python}
all_ptms = check_missingness(all_ptms, groups, group_cols)
```

```{python}
all_ptms.to_csv(f"{result_dir}/{sample}_all_ptms.tsv", sep='\t', index=False)
all_ptms.to_pickle(f"{result_dir}/{sample}_all_ptms.pkl")
```

```{python}
print(all_ptms.columns.to_list())
```

```{python}
all_ptms[pept_info_stats_cols].to_csv(f"{result_dir}/{sample}_all_ptms_for_integration.tsv", sep='\t', index=False)
all_ptms[pept_info_stats_cols].to_pickle(f"{result_dir}/{sample}_all_ptms_for_integration.pkl")
```

